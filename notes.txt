`FD_ISSET` is a macro used in C programming language in conjunction
with the `select` system call to check if a file descriptor is set
in the file descriptor sets passed to `select`. 

Here's a brief explanation:
- `FD_ISSET(int fd, fd_set *set)` tests whether the file descriptor `fd`
is a member of the file descriptor set pointed to by `set`.
- `fd` is the file descriptor being tested.
- `set` is a pointer to the `fd_set` data structure which contains a set of file descriptors.

The purpose of `FD_ISSET` is typically seen in conjunction with `select`, `pselect`, `poll`,
or `epoll` system calls for multiplexing I/O operations. It's commonly used in network
programming to check whether a socket is ready for reading or writing before
performing I/O operations on it, to avoid blocking.

///////////////////////////////////////////////////////////////////////////////////////////////////////

`FD_SET` is another macro used in C programming language, often in conjunction
with the `select` system call. It's used to add a file descriptor to the set
of file descriptors being monitored for read, write, or exceptional conditions.

Here's a brief explanation:
- `FD_SET(int fd, fd_set *set)` adds the file descriptor `fd` to the file descriptor set pointed to by `set`.
- `fd` is the file descriptor being added.
- `set` is a pointer to the `fd_set` data structure which represents the set of file descriptors.

When you want to monitor multiple file descriptors for activity (such as incoming data on a socket),
you typically use `FD_SET` to add those descriptors to the set, then pass that set to the `select` system call.
`select` will monitor those file descriptors for the specified conditions (readable, writable, or exceptional),
and when one or more of them become ready, `select` will return, allowing your program to perform I/O operations
on the ready descriptors without blocking.

//////////////////////////////////////////////////////////////////////////////////////////////////////

Because you have to use non-blocking file descriptors, it is
possible to use read/recv or write/send functions with no poll()
(or equivalent), and your server wouldnâ€™t be blocking.
But it would consume more system resources.
Thus, if you try to read/recv or write/send in any file descriptor
without using poll() (or equivalent), your grade will be 0.


With epoll you get a list returned containing only the actual events.

EPOLL_CTL_ADD:
Add an entry to the interest list of the epoll file
descriptor, epfd.  The entry includes the file descriptor,
fd, a reference to the corresponding open file description.

EPOLL_CTL_MOD:
Change the settings associated with fd in the interest
list to the new settings specified in event.

EPOLL_CTL_DEL:
Remove (deregister) the target file descriptor fd from the
interest list.  The event argument is ignored and can be
NULL (but see BUGS below).

EPOLLIN:
Available for read operastions.

EPOLLOUT:
Available for write operations.